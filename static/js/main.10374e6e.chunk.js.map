{"version":3,"sources":["components/dashboard/weather-now/weather.jsx","components/dashboard/weather-now/index.jsx","components/dashboard/weather-tomorrow/forecastDay.jsx","components/dashboard/weather-tomorrow/index.jsx","components/form/index.jsx","App.jsx","serviceWorker.js","store.js","index.js"],"names":["WeatherNow","props","this","temperature","location","text","isDay","iconURL","className","src","alt","React","Component","WeatherLocation","state","isSelectLocationOpen","setState","prevState","e","locationName","target","value","eventEmitter","emit","ref","onClick","onToggleSelectLocation","bind","placement","style","arrowProps","data-placement","id","type","placeholder","onChange","onLocationNameChange","onSelectCity","ForecastDay","day","WeatherTomorrow","forecastDays","Object","keys","map","index","console","log","avgtemp","key","FormPage","handleChange","event","onSubmit","preventDefault","firstName","onUserSubmit","redirectToWeather","history","push","required","htmlFor","App","handleUserSubmit","cityName","days","isLoading","URL","axios","get","then","res","data","current","is_day","weather_descriptions","weather_icons","forecast","catch","err","error","updateWeather","on","exact","path","component","format","ticking","interval","Boolean","window","hostname","match","Store","EventEmitter","appName","Children","children","child","cloneElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10374e6e.chunk.js","sourcesContent":["import React from 'react';\n\n// import SunImg from '../../../assets/images/sun.png';\n\nexport default class WeatherNow extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { location, temperature, isDay, text, iconURL } = this.props;\n\n        return <div className=\"weather-now-section\">\n            <div className=\"header\">Now</div>\n            <div className=\"inner-container\">\n                <div className=\"image\">\n                    <img src={ iconURL } alt=\"\"/>\n                </div>\n                <div className=\"current-weather\">{ temperature }Â°C</div>   \n            </div>\n            <div className=\"footer\">{ text }</div>\n\n            \n        </div>\n    }\n}","import React from 'react';\n\nimport \"./style.scss\";\n\nimport { TiLocation } from 'react-icons/ti';\n\n\n// import WeatherNow from \"./weather\";\n\nimport { Manager, Reference, Popper } from 'react-popper';\n\nexport default class WeatherLocation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSelectLocationOpen: false\n        }\n    }\n\n    onToggleSelectLocation() {\n        this.setState((prevState) => ({ isSelectLocationOpen: !prevState.isSelectLocationOpen }));\n    }\n\n    onLocationNameChange(e) {\n        this.setState({ locationName: e.target.value });\n    }\n\n    onSelectCity() {\n        const { locationName } = this.state;\n        const { eventEmitter } = this.props;\n        eventEmitter.emit(\"updateWeather\", locationName);\n        this.setState({ isSelectLocationOpen: false });\n    }\n\n    render() {\n        const { isSelectLocationOpen } = this.state;\n        const { eventEmitter } = this.props;\n\n        return <div className=\"select-city-container\">\n            <div className=\"location\">\n                <span><TiLocation /></span> {this.props.location}\n            </div>\n            <Manager>\n                <Reference>\n                {({ ref }) => (\n                    <button className=\"btn btn-select-location\" ref={ref} onClick={this.onToggleSelectLocation.bind(this)}>\n                        Select Another Location\n                    </button>\n                )}\n                </Reference>\n                <Popper placement=\"top\">\n                {({ ref, style, placement, arrowProps }) => \n                    isSelectLocationOpen && (\n                        <div \n                            className=\"popup-container\"\n                            ref={ref} \n                            style={style} \n                            data-placement={placement}\n                        >\n                            <div className=\"form-container\">\n                                {/* <label htmlFor=\"location-name\">Location Name</label> */}\n                                {/* <label for=\"nme\"><span>City</span></label> */}\n\n                                <input \n                                    id=\"location-name\" \n                                    type=\"text\" \n                                    placeholder=\"City Name\"\n                                    onChange={this.onLocationNameChange.bind(this)}\n                                    type=\"text\" name=\"name\" className=\"question\" id=\"nme\" required autoComplete=\"off\" \n                                />\n                                <button className=\"btn btn-select-location\" onClick={this.onSelectCity.bind(this)}>Select</button>\n                            </div>\n                            <div ref={arrowProps.ref} style={arrowProps.style} />\n                        </div>\n                    )\n                }\n                </Popper>\n            </Manager>\n            {/* <WeatherNow {...this.props}/> */}\n            \n        </div>;\n    }\n}","import React from 'react';\n\nexport default class ForecastDay extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { day } = this.props;\n        if (!day) return null;\n        return (\n            <div>\n                {/* <div className=\"image\"><img src={\"https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0004_black_low_cloud.png\"} alt=\"\"/></div> */}\n                <div className=\"text\">{day}</div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport \"./style.scss\";\n\nimport ForecastDay from './forecastDay';\n\nexport default class WeatherTomorrow extends React.Component {\n\n\n    render() {\n        const { forecastDays } = this.props;\n        return <div>\n                <div className=\"header\">Tomorrow</div>\n                <div className=\"inner-container\">\n                    \n                    {forecastDays && Object.keys(forecastDays).map((day, index) => {\n                        // return <ForecastDay day={day} key={index}/>\n                        console.log(forecastDays[day])\n                        return <ForecastDay day={forecastDays[day].avgtemp + \"Â°C\"} key={index}/>\n                        \n                    })}\n                </div>\n        </div>;\n    }\n}","import React from 'react';\nimport './../form/style.scss';\n\n\n\nexport default class FormPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: \"\",\n            redirectToWeather: false\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault()\n\n        const { firstName } = this.state;\n\n        console.log(`Your first name is ${firstName}.`);\n\n        this.props.onUserSubmit({firstName});\n\n        this.setState({ redirectToWeather: true })\n        \n        this.props.history.push('/dashboard');\n    }\n\n    // renderRedirect = () => {\n    //     if (this.state.redirectToWeather) {\n    //         this.props.history.push('/weather/');\n    //     }\n    //   }\n\n    render() {\n        const { firstName } = this.state;\n        // if (this.state.redirectToWeather === true) {\n        //     return <Redirect to=\"/weather\"/>\n        // }\n        // console.log(this.state.redirectToWeather)\n        return (\n            <form className=\"form-page\">\n                <input id=\"firstName\" placeholder=\"What's your name?\" onChange={this.handleChange} value={firstName} required/>\n                <span className=\"highlight\"></span>\n                <span className=\"bar\"></span>\n                <label htmlFor=\"\" className=\"email\"></label>\n                {/* <button onClick={this.onSubmit}>Submit</button> */}\n                <input className=\"btn btn-submit\" type=\"submit\" onClick={this.onSubmit} value=\"Submit!\"/>\n\n\n                {/*                 \n                <input id=\"firstName\" name=\"firstName\" placeholder=\"What's Your First Name?\" onChange={this.handleChange} value={firstName} className=\"question\" required/>\n                {/* <label htmlFor=\"firstName\"><p>Hello, what's your name? </p></label> */}\n                {/* <input type=\"submit\" onClick={this.onSubmit} value=\"Submit!\"/> */}\n\n            </form>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './sass/app.scss';\n\nimport WeatherNow from './components/dashboard/weather-now/weather'\nimport WeatherLocation from './components/dashboard/weather-now/index';\nimport WeatherTomorrow from './components/dashboard/weather-tomorrow/index';\nimport FormPage from './components/form/index';\n\nimport Clock from 'react-live-clock'; \nimport axios from 'axios';\n\n// var ReactFitText = require('react-fittext');\n\n\n\nconst WEATHER_KEY = '41007434f956d19cf5c620784be11b8e';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"Copenhagen\",\n      days: 5,\n      isLoading: true,\n      firstName: \"\"\n    }\n  }\n\n  updateWeather() {\n    const { cityName, days } = this.state;\n\n    const URL = `http://api.weatherstack.com/forecast?access_key=${WEATHER_KEY}&query=${cityName}&days=${days}`\n\n    axios\n      .get(URL)\n      .then((res) => {\n        // console.log(res.data)\n        return res.data;\n      }).then((data) => {\n        this.setState({ \n          isLoading: false,\n          temperature: data.current.temperature,\n          isDay: data.current.is_day,\n          text: data.current.weather_descriptions[0],\n          iconURL: data.current.weather_icons[0],\n          forecastDays: data.forecast\n        })\n      })\n      .catch((err) => {\n        if(err) {\n          console.error(\"Cannot fetch weather data from API\", err);                                                               \n        }                                 \n      });\n  }\n\n  componentDidMount() {\n    const { eventEmitter } = this.props;\n\n    this.updateWeather();\n\n    eventEmitter.on(\"updateWeather\", (data) => {\n      this.setState({ cityName: data }, () => this.updateWeather()); // pass updateWeather as callback to state change\n      \n      // console.log(\"Location name: \", data);\n    })\n\n  }\n\n  handleUserSubmit = ({ firstName }) => {\n    this.setState({ firstName });\n  }\n\n  render() {\n\n    const { isLoading, cityName, temperature, isDay, text, iconURL, forecastDays, firstName } = this.state;\n\n    return (\n      <Router>\n        <div className=\"app-container\">\n\n          <Switch>\n            <Route exact path=\"/\" component={(props) => <FormPage {...props} onUserSubmit={this.handleUserSubmit} />} /> \n\n            <Route exact path=\"/dashboard\">\n\n              <div className=\"header-container\">\n                <div className=\"header-greeting-time\">\n                  <p className=\"hello\">Howdy, {this.state.firstName ? this.state.firstName : \"stranger\" }!</p>\n                  <div>\n                    {/* <ReactFitText compressor={0.9}> */}\n                      <p className=\"clock\">\n                        <Clock format=\"HH:mm:ss\" ticking={true} interval={1000} />\n                      </p>\n                    {/* </ReactFitText> */}\n                  </div>\n                </div>\n                <div className=\"header-motivation\">\n                  <p>Ready to rock the world?</p>\n                </div>\n              </div>\n\n              <div className=\"weather-info-container\">\n                <div className=\"main-container\">\n                  {isLoading && <h3>Loading Weather...</h3> }\n                  \n                  {!isLoading &&\n                    <div>\n                      <div className=\"select-city-section\">\n                        <WeatherLocation \n                          location={cityName} \n                          temperature={temperature} \n                          isDay={isDay} \n                          text={text} \n                          iconURL={iconURL}\n                          eventEmitter={this.props.eventEmitter}\n                        />\n                      </div>\n                    \n                      <div className=\"weather-sections\">\n                        <WeatherNow {...this.state}/>\n\n                        <div className=\"weather-tomorrow-section\">\n                          <WeatherTomorrow forecastDays={forecastDays}/>\n                        </div>\n                      </div>\n                    </div>\n                  }\n                </div>\n              </div>\n            </Route>\n\n            {/* <Route exact path=\"/theme\" component={(props) => <ThemePage {...props} onColorChange={this.handleColorChange}/>}  />                             */}\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport { EventEmitter } from 'events'; // pre-built\n\nexport default class Store extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.eventEmitter = new EventEmitter();\n\n        // main app state\n        this.state = {\n            appName: \"Weather Up\"\n        }\n    }\n\n    render() {\n        return React.Children.map(this.props.children, (child) => {\n            return React.cloneElement(child, { \n                ...this.state, \n                eventEmitter: this.eventEmitter \n            });\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nimport Store from './store';\n\nReactDOM.render(\n    <Store>\n        <App />\n    </Store>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}